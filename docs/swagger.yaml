basePath: /
definitions:
  models.ErrorResponse:
    properties:
      info:
        example: additional info
        type: string
      message:
        example: error description
        type: string
    type: object
  models.Tokens:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Реализация части сервиса авторизации с использованием JWT, access/refresh
    токенов
  title: Go Auth Service
paths:
  /guid:
    get:
      consumes:
      - application/json
      description: Получение GUID текущего авторизованного пользователя
      produces:
      - application/json
      responses:
        "200":
          description: 'Пример: {"uuid":"16763be4-6022-406e-a950-fcd5018633ca"}'
          schema:
            type: object
        "401":
          description: 'Пример: {"error":"Invalid token format, token should have
            `Bearer ` prefix"}'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: 'Пример: {"message":"failed to extract claims"}'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить GUID
      tags:
      - User
  /logout:
    post:
      consumes:
      - application/json
      description: Инвалидация текущих токенов пользователя
      produces:
      - application/json
      responses:
        "200":
          description: 'Пример: {"message":"Logout successfuly!"}'
          schema:
            properties:
              message:
                type: string
            type: object
        "401":
          description: 'Пример: {"message":"access token not found"}'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: 'Пример: {"message":"logout failed"}'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Выход из системы
      tags:
      - Auth
  /refresh:
    post:
      consumes:
      - application/json
      description: Обновление пары токенов по refresh токену
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Tokens'
      produces:
      - application/json
      responses:
        "200":
          description: 'Пример: {"access_token":"eyJ...","refresh_token":"bmV3IHJlZnJlc..."}'
          schema:
            $ref: '#/definitions/models.Tokens'
        "403":
          description: 'Пример: {"message":"wrong pair of tokens"}'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: 'Пример: {"message":"error you changed user-agent content"}'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: 'Пример: {"message":"token generation error"}'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить токены
      tags:
      - Auth
  /token:
    get:
      consumes:
      - application/json
      description: Получение access и refresh токенов. Если пользователя нет - он
        создается.
      parameters:
      - description: User GUID
        example: 16763be4-6022-406e-a950-fcd5018633ca
        format: uuid
        in: query
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Пример: {"access_token":"eyJ...","refresh_token":"bmV3IHJlZnJlc..."}'
          headers:
            Authorization:
              description: 'Пример: Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9...'
              type: string
          schema:
            $ref: '#/definitions/models.Tokens'
        "400":
          description: 'Пример: {"message":"Wrong uuid input","info":"you must enter
            a 36-character uuid"}'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: 'Пример: {"message":"Database error","error":"connection refused"}'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Получить пару токенов
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
